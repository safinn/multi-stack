/**
 * This file was generated by kysely-codegen.
 * Please do not edit it manually.
 */

import type { ColumnType } from "kysely";

export type Generated<T> = T extends ColumnType<infer S, infer I, infer U>
  ? ColumnType<S, I | undefined, U>
  : ColumnType<T, T | undefined, T>;

export type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;

export type Timestamp = ColumnType<Date, Date | string, Date | string>;

export interface Connection {
  createdAt: Generated<Timestamp>;
  id: string;
  providerDisplayName: string | null;
  providerId: string;
  providerName: string;
  updatedAt: Generated<Timestamp>;
  userId: string;
}

export interface Membership {
  createdAt: Generated<Timestamp>;
  id: string;
  invitationId: string | null;
  invitedById: string | null;
  inviteEmail: string | null;
  organizationId: string;
  roles: Generated<string[]>;
  updatedAt: Generated<Timestamp>;
  userId: string | null;
}

export interface Organization {
  createdAt: Generated<Timestamp>;
  description: Generated<string>;
  id: string;
  name: string;
  personalOrganizationUserId: string | null;
  shortId: string;
  updatedAt: Generated<Timestamp>;
}

export interface Passkey {
  aaguid: string;
  backedUp: boolean;
  counter: Int8;
  createdAt: Generated<Timestamp>;
  deviceType: string;
  id: string;
  publicKey: Buffer;
  transports: string | null;
  updatedAt: Generated<Timestamp>;
  userId: string;
  webauthnUserId: string;
}

export interface Password {
  hash: string;
  userId: string;
}

export interface Permission {
  access: string;
  action: string;
  createdAt: Generated<Timestamp>;
  entity: string;
  id: string;
  updatedAt: Generated<Timestamp>;
}

export interface PermissionRole {
  permission: string;
  role: string;
}

export interface Role {
  createdAt: Generated<Timestamp>;
  description: Generated<string>;
  name: string;
  order: number;
  updatedAt: Generated<Timestamp>;
}

export interface Session {
  createdAt: Generated<Timestamp>;
  expirationDate: Timestamp;
  id: string;
  updatedAt: Generated<Timestamp>;
  userId: string;
}

export interface User {
  createdAt: Generated<Timestamp>;
  deletedAt: Timestamp | null;
  deletedBy: string | null;
  email: string;
  id: string;
  updatedAt: Generated<Timestamp>;
  username: string;
}

export interface Verification {
  algorithm: string;
  charset: string;
  createdAt: Generated<Timestamp>;
  digits: number;
  expiresAt: Timestamp | null;
  id: string;
  period: number;
  secret: string;
  target: string;
  type: string;
}

export interface DB {
  connection: Connection;
  membership: Membership;
  organization: Organization;
  passkey: Passkey;
  password: Password;
  permission: Permission;
  permissionRole: PermissionRole;
  role: Role;
  session: Session;
  user: User;
  verification: Verification;
}
